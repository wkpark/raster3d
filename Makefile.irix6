include VERSION
#
# Raster3D makefile for SGI under Irix 6.x
#

#
# The Irix compiler commands are a mess.
# The different architectures and Irix versions all want 
# different compiler invocations. 
# You must check that 
# 	CC, FC, FFLAGS, FOPTS, LIBS, and INCLUDES 
# are correctly defined for your machine.

# 64-bit architectures
# CC	= cc  -n64 -g -w
# FC	= f77 -n64

# 32-bit architectures
CC	= cc  -n32 -g -w
FC	= f77 -n32 -L/usr/lib32

#
# You may be able to raise the optimization level (try -O instead of -g)
# but under Irix 6.1 this produces improper code for ribbon and rastep.
# But you probably needn't bother -
# FFLAGS is not used for building render, which is the only
# part of the package that really benefits from optimization.
# 
F77	= $(FC)
FFLAGS	= -g

# 
# These are otimizations recommended for render by the compiler on my
# test machines. Yours might vary.  
# Render really benefits from optimization, so try to get this right.

# The following line worked for me under Irix 6.1
# FOPTS = -O -OPT:fprop_limit=1096:const_copy_limit=13000

# The following line worked for me under Irix 6.2
# FOPTS = -O -OPT:Olimit=4000

# The following line worked for me under Irix 6.4
# FOPTS = -O -OPT:Olimit=4000

# The following line worked for me under Irix 6.5
FOPTS = -O -OPT:Olimit=4000

#
# SGI imagetools support (-sgi output option to produce *.rgb files)
#     add -DLIBIMAGE_SUPPORT to the DEFINES statement.
#     add -limage to the LIBS definition
#
# TIFF support (enabled by default)
#     add -DTIFF_SUPPORT to the DEFINES statement.
#     add -ltiff to the LIBS definition.
# The TIFF_INVERT option is a work-around for broken programs
# (e.g. PhotoShop) that don't properly read the TIFF header.
#
# JPEG support (disabled by default)
#     add -DJPEG_SUPPORT to the DEFINES statement.
#     add -ljpeg to the LIBS definition.
# At least some distributions of Irix have incompatible versions of
# libjpeg.h and libjpeg.so
# If you get error messages while linking render_jpeg complaining about
# missing objects jpeg_CreateCompress, then add the BROKEN_LIBJPEG
# definition as in the example lines below.
# DEFINES = -DJPEG_SUPPORT -DBROKEN_LIBJPEG
# LIBS    = -ljpeg
#
# Auto conversion of output using ImageMagick (enabled by default)
#     add -DIMAGEPIPE to the DEFINES statement.
#

INCLUDES = -I/usr/local/include
DEFINES  = -DLIBIMAGE_SUPPORT -DTIFF_SUPPORT -DTIFF_INVERT -DIMAGEPIPE -DJPEG_SUPPORT
LIBS     =  -limage -ltiff -ljpeg

#
# You shouldn't have to change anything below this line
#
LDFLAGS	= 

RIBOBJS	=	ribbon.o ribbon1.o modsubs.o
PROGS	=	balls normal3d rastep rods ribbon render avs2ps rings3d

all:	$(PROGS)

clean:
	rm -f *.o *.u core
	rm -f $(PROGS)

install: $(PROGS)
	mv $(PROGS) /usr/local/bin/
	cp stereo3d /usr/local/bin/
	cp label3d  /usr/local/bin/
	@echo "	*******************************************"
	@echo "	* The examples/ subdirectory contains     *"
	@echo "	* files to verify your installation and   *"
	@echo "	* to serve as examples of use.            *"
	@echo "	*******************************************"

tar:
	(cd ..; tar -cvf Raster3D_$(VERSION).tar raster3d)
	/usr/bin/compress  ../Raster3D_$(VERSION).tar
	(cd ..; gtar -czvf Raster3D_$(VERSION).tar.gz raster3d)

normal3d: normal3d.o quadric.o ungz.o
	$(FC) $(FFLAGS) normal3d.o quadric.o ungz.o -o normal3d

rastep:	rastep.o quadric.o suv.o
	$(FC) $(FFLAGS) rastep.o quadric.o suv.o -o rastep

ribbon:	$(RIBOBJS)
	$(FC) $(RIBOBJS) -o ribbon

local.o: local.c
	$(CC) $(INCLUDES) $(DEFINES) -c local.c

ungz.o: ungz.c
	$(CC) $(INCLUDES) -DGUNZIP -c ungz.c

render.o: render.f
	$(FC) $(FOPTS) -c render.f

render:	render.o local.o quadric.o parse.o r3dtops.o ungz.o
	$(FC) $(FFLAGS) render.o quadric.o local.o parse.o r3dtops.o ungz.o \
	$(LIBS) -o render $(LDFLAGS)

avs2ps:	avs2ps.c
	cc -O avs2ps.c -o avs2ps

