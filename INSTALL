%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     To install Raster3D       %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

1) copy the appropriate Makefile.xxx for your machine to Makefile

2) inspect the Makefile to make sure that it is appropriate for your site,
   and possibly edit the file to include TIFF, JPEG, or LIBIMAGE support.

   In order to build Raster3D so that it supports the direct output of
   TIFF image files you must
	1) Obtain and install a TIFF library. There are a number of
	   implementations available on the net.  I have been using
	   Sam Leffler's version 3.4, available via anonymous ftp
	   from sgi.com.
	2) Edit the DEFINES and LIBS definitions in the Makefile,
	   DEFINES  = -DTIFF_SUPPORT
	   LIBS     = -ltiff

   In order to build Raster3D so that it supports the direct output of
   JPEG image files you must
	1) Obtain and install a JPEG library. The current version is
	   jpeg-6b, available from ftp://ftp.uu.net/graphics/jpeg/jpegsrc.v6b.tar.gz
	2) Note that the JPEG headers and libraries distributed with Irix versions
	   prior to Irix V6.5 were internally incompatible. There is a workaround in
	   Makefile.irix6, but you may want to just build and use a correct current
	   version of the jpeg library from the ftp site listed above.
	3) Edit the DEFINES and LIBS definitions in the Makefile,
	   DEFINES  = -DJPEG_SUPPORT
	   LIBS     = -ljpeg

   On SGI machines you may want to build in support for direct output to
   image files compatible with the libimage utilities.  In this case you
   must
	1) Make sure that libimage.a is installed on your machine
	   (the source is on one of the optional installation kits in the
	   standard Irix distribution).
	2) Edit the INCLUDES and LIBS definitions in the Makefile,
	   INCLUDES = -DLIBIMAGE_SUPPORT
	   LIBS     = -limage

   There is also an option (new in this version) to pipe output directly to
   ImageMagick for conversion to many other image file types. This is enabled
   by default under the control of the flag -DIMAGEPIPE.


4) Install the package:
	make all
	make install
   If the installation part doesn't work, just copy the executables to 
   wherever you want them to live (usually /usr/local/bin/), 
   copy the manual pages to /usr/local/man/manl/,
   and copy the html documentation to its proper home (/usr/local/man/html?).


5) Add R3D_LIB to your system-wide initialization of environmental
   variables, or instruct users to insert one of the following into their
   login shell initialization. Of course if you are installing Raster3D
   somewhere other than /usr/local/src then you need to modify the examples
   below accordingly:

	csh/tcsh:	setenv R3D_LIB /usr/local/src/raster3d/materials

	sh/ksh:		R3D_LIB=/usr/local/src/raster3d/materials
			export R3D_LIB

   Then if a render input file contains a line such as "@transparent.r3d"
   the program will first look in the current directory (./transparent.r3d)
   and if that fails then look for $(R3D_LIB)/transparent.r3d 


6) [Optional] If you have ImageMagick version 4.1.8 or newer installed, you
   may want to teach it how to use the Raster3D rendering program as a 
   delegate.  You can do this by adding lines at the end of the file
   /usr/local/share/ImageMagick/delegates.mgk   as shown below:

#
# Use Raster3D rendering program as a delegate for files ending in .r3d
   r3d=>
	   render -tiff %o < %i


7) Go to the examples subdirectory and try running the example scripts
   to verify installation.

A sample installation on a DEC Alpha might go:
	cp Makefile.dec Makefile
	vi Makefile                    # to check options, etc
	make all                       # build the programs
	make install                   # install them
	cd examples                    # run the demo/verification scripts
	./example1.script
	./example2.script
	./example3.script
	... and so on ...
	cp html/* /usr/local/man/html/ # install the HTML documentation

Notes -

	The install procedure does not automatically install the html
version of the documentation, nor does it print the PostScript version.
The SGI/Irix scripts don't even install the man pages, because Irix
apparently ships without a real man page viewer.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       Known Problems          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Digital Unix
============
Everything is fine under DU 4.0D and above.  
Under DU 4.0A/B the f90 compiler produced broken code for render.f 
when the optimization level was set higher than -O1. f77 was OK.

Irix
====
Makefile.sgi worked for me on test machines running Irix versions
4.0.5, 5.3, and 6.2.  This Makefile uses the old f77 compiler (-mips 2).

Makefile.irix6 uses the new f77 compiler (-mips 3), which produces 
code for render that runs about 30% faster.  
Under Irix 6.1 6.2 6.4, you may have to fiddle with the library search 
paths to bring in compatible versions of the libimage, libtiff, and libjpeg 
libraries.
Works with no fiddling under Irix 6.5

Some versions of Irix 6 include self-incompatible versions of 
libjpeg.h and libjpeg.so.  To work around this there is a conditional
flag in local_jpeg.c triggered by adding the definition -DBROKEN_LIBJPEG
in the Makefile. Or just obtain and build a correct version of libjpeg.so
from the independent JPEG development group ftp://ftp.uu.net/graphics/jpeg/

linux
=====
I run this package on a Pentium Pro under redhat linux, and I have 
included a Makefile for that platform.  I have "f77" aliased to the
fort77 script, which then feeds into f2c and gcc.  All straight from
the redhat distribution except for the f77 alias.
There are some gotchas, however:
	- The pre-built linux binaries for ImageMagick 3.8.8 get confused
	  by the byte order in AVS files.  To work around this problem I
	  added a conditional compilation flag -DNETWORKBYTEORDER in
	  the Makefile.
I haven't tried the g77 compiler, but I am told that it doesn't like the
Q formats in ribbon1.f

Sun, HP
=======
No reported problems, but I don't have access to these platforms so 
I haven't checked the package myself.  If you can confirm that it works
as distributed, I'd appreciate the information.  If you had to make
changes, I'd be even more appreciative if you'd let me know what they
were so that I can fix the distribution accordingly.


=== OS/2 ===

Uwe Baumert reports the following:

I'm pleased to say that I was also able to compile your Raster3D package
under OS/2 (Linux will follow). I used f2c 19970211. I had to modify some
code (I got wrong iocontrols etc.).  
[EAM - He means the CARRIAGECONTROL option in the normal3d.f OPEN statements;
just delete these two lines from the source code].
I compiled against the libtiff-library (version 4.2). I used the one that
was included in the NETPBM-Port of Peter Meerwald (pmeerw@cosy.sbg.ac.at)
and is available from
ftp://ftp.leo.org/pub/comp/os/os2/leo/graphics/netpbm*.zip. 


=== Windows ===

Many thanks to Suhaib Siddiqi, who offers the following recipe for 
building Raster3D under Windows:

I have successfully compiled Raster3D 2.4g on Windows NT/95/98.  It is a
direct port of your source code without any modifications or deletions.

1) Go to http://sourceware.cygnus.com/cygwin
2) Download G77 and ObjectC in addition to Cygwin-B20
3) Unmount C drive (umount -a /) and remonut as binary (mount -b c: /).  It
is very important.
4) Install Cygwin-b20 in C:\usr, instead of default directories.
5) Download Cygwin-B20
6) Download Jpeg, PNG and TIFF libraries from ftp.uu.net
7) Compile Jpeg,PNG and TIFF with Cygwin-B20 and install
8) Install all the jpeg and tiff libraries in /usr/local
9) download Raster3D source code and etxract using tar utility supplied with
   Cygwin-b20. Download Raster3D_xxx.gz (rather than .Z) as
   Cygwin-B20 only handles gzip compression.
(Note: Don't use WinZip or any other Windows programs to extract archive of 
Raster3D and JPEG etc libraries otherwise you will get parse errors during 
compilation). 

Please let your users know that they will also need to download compiled
binaries of Image Formate Libraries from http://www.sgi.com - Go to OpenGL
web pages and look for OpenGL Optimizer Version 1.1 download site.  You will
find Image Formate Libraries for Windows there.  I used these libraries
together with libjepg.a and libtiff.a for linking.  They produced better
results - that is images were of better quality.

To use Raster3D from /usr/H-i586-cygwin32/bin copy cygwin1.dll to Raster3D
directory and include Raster3D to your Windows enviroment.  That is it.


