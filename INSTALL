%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     To install Raster3D       %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

1) copy the appropriate Makefile.xxx for your machine to Makefile

2) inspect the Makefile to make sure that it is appropriate for your site,
   and possibly edit the file to include TIFF or LIBIMAGE support.

   In order to build Raster3D so that it supports the direct output of
   TIFF image files you must
	1) Obtain and install a TIFF library. There are a number of
	   implementations available on the net.  I have been using
	   Sam Leffler's version 3.4, available via anonymous ftp
	   from sgi.com.
	2) Edit the DEFINES and LIBS definitions in the Makefile,
	   DEFINES  = -DTIFF_SUPPORT
	   LIBS     = -ltiff

   On SGI machines you may want to build in support for direct output to
   image files compatible with the libimage utilities.  In this case you
   must
	1) Make sure that libimage.a is installed on your machine
	   (the source is on one of the optional installation kits in the
	   standard Irix distribution).
	2) Edit the INCLUDES and LIBS definitions in the Makefile,
	   INCLUDES = -DLIBIMAGE_SUPPORT
	   LIBS     = -limage

3) You can, if you like, build an alternate version of the rendering 
   program that directly outputs a JPEG file. This could be useful, say,
   for the back end of a web server. Depending on where your JPEG 
   library is installed you may be able to simply try "make render_jpeg".
   If this fails you will have to edit the Makefile to point correctly
   to the JPEG library, and perhaps alter the #include statements in 
   local_jpeg.c  or the INCLUDES definition in the Makefile.

4) Install the package:
	make install
   If this doesn't work, just copy the executables to wherever you want
   them to live (usually /usr/local/bin/), and copy the manual pages to
   /usr/local/man/manl/.

5) Go to the examples subdirectory and try running the example scripts
   to verify installation.

A sample installation on a DEC Alpha might go:
	cp Makefile.dec Makefile
	vi Makefile                    # to check options, etc
	make install

Notes -

	The install procedure does not automatically install the html
version of the documentation, nor does it print the PostScript version.
The SGI/Irix scripts don't even install the man pages, because Irix
apparently ships without a real man page viewer.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       Known Problems          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Digital Unix
============
DEC's f90 compiler produces broken code for render.f when the optimization
level is set higher than -O1.   Use the f77 compiler or f90 -O1.
Under Digital Unix 4.0, compiling with "f77 -g" crashes the compiler.
Optimization levels -O1 to -O5 work fine.  Go figure.

Irix
====
Irix 6.4 same as Digital Unix 4.0; "f77 -g" crashes the compiler.
f77 -O2 works fine.

AIX
===
The AIX compiler doesn't like the Q formats, but that doesn't seem
to hurt anything.

linux
=====
I run this package on a Pentium Pro under redhat linux 4.2, and I have 
included a Makefile for that platform.  I have "f77" aliased to the
fort77 script, which then feeds into f2c and gcc.  All straight from
the redhat distribution except for the f77 alias.
There are some gotchas, however:
	- "nawk" is installed as "awk" in redhat, so you need to either
	  define nawk as an alias for awk or just change "nawk" to "awk"
	  in the stereo3d script.
	- Sometimes the TIFF library dumps core after closing an image
	  file in TIFFClose().  Very annoying, but other than producing
	  a core dump it doesn't hurt anything - the image file has 
	  already been successfully created at that point.
	- The pre-built linux binaries for ImageMagick 3.8.8 get confused
	  by the byte order in AVS files.  To work around this problem I
	  added a conditional compilation flag -DNETWORKBYTEORDER in
	  the Makefile.

Sun, HP
=======
No reported problems, but I don't have access to these platforms so 
I haven't checked the package myself.  If you can confirm that it works
as distributed, I'd appreciate the information.  If you had to make
changes, I'd be even more appreciative if you'd let me know what they
were so that I can fix the distribution accordingly.


=== OS/2 ===

Uwe Baumert reports the following:

I'm pleased to say that I was also able to compile your Raster3D package
under OS/2 (Linux will follow). I used f2c 19970211. I had to modify some
code (I got wrong iocontrols etc.).  
[EAM - He means the CARRIAGECONTROL option in the normal3d.f OPEN statements;
just delete these two lines from the source code].
I compiled against the libtiff-library (version 4.2). I used the one that
was included in the NETPBM-Port of Peter Meerwald (pmeerw@cosy.sbg.ac.at)
and is available from
ftp://ftp.leo.org/pub/comp/os/os2/leo/graphics/netpbm*.zip. 

