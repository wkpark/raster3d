	LONG TERM PLAN FOR LABELS IN RASTER3D
	=====================================

The biggest thorn in my side since early on in my development of
the Raster3D package has been how to make it easy for people to
add labels.  There are a number of approaches one could take, but
so far all of the ones I have seriously considered have drawbacks
of one sort or another.  I have implemented trial versions of a 
couple of schemes, but I haven't been sufficiently happy with any
of them to fully incorporate them into Raster3D.  The best
of a problematic lot has been the label3d/ghostscript/ImageMagick
combination, a rough version of which has been in the distribution
since version 2.3b.

Goals for label support:
-----------------------

1) A wide variety of fonts and styles should be available. A truly
   general mechanism would allow arbitrary patterns or bit patterns
   to be placed in the image, not just alphanumerics.

2) The labels should have 3D coordinates, so that they stay near the
   intended location even if the TMAT orientation matrix is later
   changed.  The labels should always face the viewer, however.

3) The program should have some reasonable default scaling so that 
   the size of the labels is reasonable compared to the size of the
   image. Since this can never be fool-proof, however, there should
   be some external global control of the font scaling from the
   command line.

4) The overhead should be low. This includes CPU time, disk space,
   and required user intervention.

5) The installation requirements should be minimal, and not require
   any commercial software.

Possible approaches:
-------------------

I   Post-hoc labeling of the figures.  That's what you have to do now.  
	Advantages 
	    choice of local tools 
	    wide variety of fonts (probably)
	Disadvantages 
	    very tedious 
	    no intrinsic notion of label coordinates in 3D 
	    has to be done all over again if the figure changes

II  Semi-automated version of the above.
    (1) search for the label commands in the render input file 
    (2) convert them to PostScript commands
    (3) feed resulting file to ghostscript for conversion to a
       raster file of the same size as the Raster3D rendered image
    (4) create a composite image that superimposes the labels on
       top of the rendered image.
    This is the approach partially implemented in the label3d script.
    It feeds the render input through a Fortran program r3dtops,
    feeds the output to ghostscript to create a *.ppm image, and uses
    the ImageMagick utility program 'combine' to create a composite
    image.
    	Advantages 
	    semi-automated
	    huge array of PostScript fonts
    	Disadvantages 
	    requires installation of ghostscript and ImageMagick (not too hard)
	    has to be re-run if the header records to render are changed at all
	    the 3D nature of the label coordinates is lost (labels always 
	    	appear on top of everything else in the figure)

III Auto-generation of character strokes as Raster3D objects by calling program
    (1) originating program converts individual characters to Raster3D objects
    (2) labels appear as normal objects (probably cylinders) 
	in the render input stream
    	Advantages
	    fully automated
	    3D nature of label positioning kept
    	Disadvantages 
	    can't edit the label afterwards
	    severe shortage of fonts available
            requires substantial additional software installation, 
       		and most of the clever packages are machine-specific
	    labels specified in object coords (no ISOLATION) rotate with the 
		rest of the image
	    labels specified in screen coords (ISOLATION) may be in the wrong
		place if the TMAT header records are changed
    This is the approach taken by Molscript V2, Spock, and VMD. 

IV  Post-processed generation of 3D objects in the shape of label characters.
    (1) originating program specifies labels as object types 10/11/12
    (2) label commands are converted to input stream of Raster3D objects
    (3) label input stream is included in the normal input to render
    	Advantages
	    semi-automated  (fully automated if the conversion code is added
		directly to the render program)
	    3D nature of label positioning kept
    	Disadvantages 
	    severe shortage of fonts available
            requires substantial additional software installation, 
       		and most of the clever packages are machine-specific
	    labels specified in object coords (no ISOLATION) rotate with the 
		rest of the image
	    labels specified in screen coords (ISOLATION) may be in the wrong
		place if the TMAT header records are changed

V   Labels as a special case of texture mapping.  This is the most
    general approach, but also the hardest.
    (1) Pre-process labels, making a rasterized version of each one
        (as in label3d/ghostscript approach II above)
    (2) Place dummy transparent objects at the desired label positions
        in the render input stream
    (3) Assign the rasterized label as a texture map associated with
        the corresponding dummy object
    (4) During rendering the dummy object + texture mapping is just
        like any other Raster3D object
   	Advantages 
	    full array of PostScript fonts available
	    could in theory apply texture map directly to the labeled object 
	   	(e.g. atom spheres labelled like billiard balls) 
	    not sensitive to changes in header records 
	    3D coordinates kept
   	Disadvantages 
	    requires implementing texture maps in Raster3D (major project)


What I've done so far:
---------------------

I have included specifications for object types 10/11/12 to support
description of the desired labels within the Raster3D input stream
to render.  I hope that the specification is general enough to be
compatible with any of the above implementations.

Approach II was partially implemented in the labels3d script, but it
fell behind the current version of render.  I have now updated the
program and the script interface to it so that they are compatible with
Raster3D version 2.4j

Approach III/IV is illustrated in the test program r3d_label.c
It uses the stroke font calls in the GLUT library.  
This is easy enough from my end, but requires that the user install
GLUT on top of Open3D or MESA, which is non-trivial on most machines.
Also there's only one, very boring, font in the GLUT distribution and
it doesn't even contain symbol characters.  Other fonts may in theory be
available, but rebuilding the GLUT library to support them is way
beyond what I can ask of users.


 - Ethan A Merritt   6-May-1999
