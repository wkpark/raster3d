most recent change:	  7-Aug-1997

The file Raster3D_2.3d.tar.Z contains the complete distribution 
of version 2.3 of RASTER3D.

This unified distribution has been tested under the following 
operating systems:

	Alpha / OSF 4.0			(see INSTALL notes)
	SGI / Irix 5.3
	SGI / Irix 6.1
	IBM RS6000 / AIX 4.2		(see INSTALL notes)

People have reported success on the following, but I can't check them myself:
	SUN Sparc  / SUNOS 4.1.3_U1
	linux (redhat)
	OS/2

New in version 2.3:

- new object types for render
	type 10:	(reserved for labels)
	type 11:	(reserved for labels)
	type 12:	(reserved for labels)
	type 13:	internal light source ("glow" light)

- New programs
	stereo3d	automatic script to produce side-by-side stereo pair
	labels3d	first effort at Raster3D label support;
			mostly intended to guide application development

- File indirection supported in Raster3d input files
  (lines starting with @ cause input to be taken from a new file)

- Additional properties and rendering options for special materials

- Alpha blend (matte) channel in output image if SCHEME=0
  Draft mode (SCHEME=1) and anti-aliasing mode (SCHEME=4) produce the
  same output image size, unlike previous anti-aliasing options

- More complete patch to Molscript that fixes some problems with alpha helices


Other changes since first distribution of version 2.0:

- all documentation is on line in the form of HTML files
- new object types for rendering
	type 7:	explicit vertex normals for triangle
	type 8: special material properties for lighting model
	type 9: terminates previous special material, may be used as comment
- renamed "setup" to be "balls", in hope of avoiding conflicts with
  other system-dependent utilities called "setup"
- more accounting information reported in render

- added machine-independent utility filter avs2ps to produce dithered
  black&white PostScript output (supercedes machine-dependent stuff in
  viewtools)
- added patch for Molscript V1.4 so that dotted lines can be passed
  on to Raster3D

The render program may be run with any one of four output modes
currently supported in the file local.c:
1) AVS-compatible output to stdout, intended for piping to ImageMagick
   or other image file format conversion program. (default behaviour).
2) SGI libimage output to file specified in command line using the 
   -sgi flag (e.g. render -sgi outfile.rgb). Support of this option
   is conditionally compiled into local.c, and is only relevant when
   Raster3D is to be installed on an SGI machine.
3) TIFF output file specified in command line using the -tiff flag.
   The option requires that the TIFF support library libtiff.a be
   separately obtained and installed before building Raster3D.
4) The -original option to render is intended to produce output on stdout 
   which is compatible with the original (UA/UBC) Raster3D versions, so that
   image post-processing programs (e.g. idither/hdith/dith2lp) may
   still be used.

Unless you specifically need libimage compatibility, I suggest
that you simply use the default AVS-compatible output, and use John Cristy's
ImageMagick package to view or process the output.  ImageMagick runs
nicely on any machine supporting X-windows, and may be obtained
via anonymous ftp from a number of sites, including export.lcs.mit.edu.

Using ImageMagick as a viewer, a typical command might look something like:

	cp  selected_view_from_viewing_program setup.matrix
	cat mycolors.pdb protein.pdb | rods | render | display avs:-

If you are running on an SGI machine and want to use the libimage utilities,
then the equivalent commands would be something like:

	cat mycolors.pdb protein.pdb | rods | render -sgi picture.rgb
	ipaste picture.rgb

The setup/rods/ribbon utilities now have a -h flag which suppresses output
of the Raster3D header records.  Using -h allows one to merge output
from the various utilities without an editing step.  For example, to draw a
ribbon backbone of an iron containing protein with spheres for iron
atoms:

	ribbon -d4 protein.pdb > ribbon.r3d
	grep FE protein.pdb | cat colors.pdb - | setup -h > irons.r3d
	cat ribbon.r3d irons.r3d | render | convert avs:- miff:rib+Fe.miff.Z

Finally, to render a figure and save the resulting image as a TIFF file
using ImageMagick:

	render < mypicture.r3d | convert avs:- tiff:mypicture.tiff

If you want to use a viewer which doesn't recognize AVS format image files,
then you may want to build the TIFF support into Raster3D. For example, to
create and view a TIFF file using the xv viewer:

	render -tiff mypicture.tiff < mypicture.r3d; xv mypicture.tiff



				Ethan A Merritt
				merritt@u.washington.edu
