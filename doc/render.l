.ad l
.nh
.TH RENDER 1 "23 November 1993" "Raster3D"
.SH NAME
render - central program of Raster3D molecular graphics package
.SH SYNOPSIS
.B "render" [\fI-sgi filename\fP] [\fI-original\fP]
.PP
\fIRender\fP reads an ascii file consisting of several header lines
followed by individual object descriptors. 
The objects are rendered using a fast Z-buffer algorithm to produce
a high quality pixel image which contains two light sources, 
specular highlighting, Phong shaded surfaces, and shadows.
Output is to stdout [or optional file] in the form of a pixel image
with 24 bits of color information per pixel.
Several utility programs exist which will create all or part
of an acceptable input file by reading atomic coordinates from a
Brookhaven PDB file.
These include \fIsetup\fP, \fIrods\fP, and \fIribbon\fP from the 
\fIRaster3D\fP distribution kit, and \fIMOLSCRIPT\fP [ref: Kraulis, 1991].

.PP
.SH EXAMPLES
.PP
To render a simple space-filling model coloured by residue type:
.PP
     cat mycolors.pdb protein.pdb | setup | render > mypicture.avs
.PP
Display the same picture on an X-windows display directly using 
ImageMagick:
.PP
     cat mycolors.pdb protein.pdb | setup | render | display avs:-
.PP
To render and display the same picture using the SGI libimage format:
.PP
     cat mycolors.pdb protein.pdb | setup | render -sgi picture.rgb
     ipaste picture.rgb
.PP
Render a stick-figure model of a cofactor jointly with a ribbon
model of a protein.
Note that the header records are generated by
the \fIribbon\fP command in this case; the -h flag suppresses generation
of a second set of header records in the \fIrods\fP command.
The ImageMagick \fIconvert\fP command is used to save the resulting
image as a TIFF file.
.PP
     ribbon -d4 protein.pdb > ribbon.r3d
     cat colors.pdb cofactor.pdb | rods -bs -h > cofactor.r3d
     cat ribbon.r3d cofactor.r3d | render | convert avs:- picture.tiff
.SH OPTIONS
.TP 5
.B "-sgi filename"

Only if compiled with -DLIBIMAGE_SUPPORT.
By default \fIrender\fP will produce an AVS-compatible image on stdout.
The -sgi flag will cause it to output an SGI libimage style *.rgb file
instead.
In this case default output is to the file render.rgb, but specifying a file
on the command line will override this default.

.B "-original"

This flag causes \fIrender\fP to produce an output image compatible with
some earlier versions of the \fIRaster3D\fP package. Output is to stdout.

.SH DESCRIPTION
.PP 
The input to \fIrender\fP consists of a single text file
containing everything necessary to prepare the image
of a scene consisting of coloured spheres, cylinders and triangles.
The header records contain information 
global to the scene being rendered.  The header records are
followed by individual object records containing coordinate and
color specification for the objects in the scene.
.PP 
The required header records of a \fIrender\fP input file are
described below.
Except where noted, each item is on a line by itself in
free format.  The names are of variables in the program
source code.
.TP 5 
.B     TITLE    
Anything you like, up to 80 characters.
.TP 5 
.B     NTX,NTY  
Number of "tiles" in each direction.  (The output
display is considered to be divided up into an
array of identical rectangular tiles.)
.TP 5 
.B     NPX,NPY  
Number of computing pixels per tile in each direction.
.TP 5 
.B     SCHEME   
Pixel averaging (anti-aliasing) scheme (1, 2, or 3), where
 1 means   1 computing pixel  for 1 output pixel
 2 means 2x2 computing pixels for 1 output pixel
 3 means 3x3 computing pixels for 2x2 output pixels

(i.e. scheme 1 produces a NTX*NPX by NTY*NPY pixel image,
scheme 3 produces a (2/3)NTX*NPX by (2/3)NTY*NPY image)
Increased anti-aliasing produces a scene in which objects
have less jagged edges, at the cost of additional computation.
.TP 5 
.B     BKGND    
Background colour (red, green, and blue components,
each in the range 0 to 1).
.TP 5 
.B     SHADOW   
T to calculate shadowing within the scene, F to omit shadows
.TP 5 
.B     IPHONG   
Phong power (e.g., 25) for specular reflections.
A smaller value results in a larger spot.
.TP 5 
.B     STRAIT   
Straight-on (secondary) light source contribution
(e.g., 0.15).  The primary light source contribution
(see also SOURCE below) is given by PRIMAR = 1 - STRAIT.
.TP 5 
.B     AMBIEN   
Ambient reflection quantity (e.g., 0.05).
.TP 5 
.B     SPECLR   
Specular reflection quantity (e.g., 0.25).
The diffuse reflection quantity is given by
DIFFUS = 1 - (AMBIEN+SPECLR).  Ambient and diffuse
reflections are chromatic, taking on the specified
colour of each object, whereas specular reflections
are white.
.TP 5 
.B     EYEPOS   
Eye position (e.g., 4), in units such that 1 is the
narrower dimension of the output image.  This should be
used to control perspective rather than TMAT (below).
.TP 5 
.B     SOURCE   
Main light source position (e.g., 1 1 1).  The point
source is at infinity in the direction of this vector
(see note on co-ordinate convention below) and is
white.
.TP 5 
.B     TMAT     
Homogeneous global transformation for input objects,
given as a 4 by 4 matrix on 4 lines just as you would
write it if you intended it to be a postfix (suffix)
operator.  The upper left 3 by 3 submatrix expresses
a pure rotation, the lower left 1 by 3 submatrix
gives a translation, the upper right 3 by 1 submatrix
should be zero (otherwise extra perspective is
introduced), and the lower right scalar produces
global scaling (reciprocally).  Radii, if any, are
divided by this scalar.
Coordinate vectors [x y z] are extended with a 1
to make them homogeneous, and then postmultiplied
by the entire matrix; 
 i.e., if 
      [x' y' z' h'] = [x y z 1][TMAT],
 then the ultimate co-ordinates are
      [x" y" z"] = (1/h')[x' y' z'].
.TP 5 
.B     INMODE   
Object input mode (1, 2, or 3), where
mode 1 means that all objects are triangles,
mode 2 means that all objects are spheres,
and mode 3 means that each object will be preceded
by a record containing a single number indicating its type,
where
 type 1 = triangle
 type 2 = sphere
 type 3 = round-ended cylinder
 type 5 = float-ended cylinder
 type 6 = plane (triangle with infinite extent)
.TP 5 
.B     INFMT or INFMTS
Object input format specifier(s).  For object input
modes 1 and 2, there is just one format specifier
INFMT for the corresponding object type, while for
mode 3, there are three format specifiers INFMTS
on three lines.  The first describes the format
for a triangle, the second for a sphere, and the
third for a cylinder.  Each format specifier
is either a Fortran format enclosed in parentheses,
or a single asterisk to indicate free-format input.
Parameters are read in the order

 triangle or plane (object types 1 or 6): 
      x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue;
 sphere (object type 2):    
      x, y, z, radius, red, green, blue;
 cylinder (object type 3 or 5): 
      x1, y1, z1, R1, x2, y2, z2, R2, red, green, blue.
      (R1 is the cylinder radius, R2 is currently ignored).

.TP 5
.B SAMPLE HEADER

 My picture. (describes a 1280 x 1024 pixel anti-aliased image)
 80 64     tiles in x,y
 24 24     pixels (x,y) per tile
 3         anti-aliasing level 3;  3x3->2x2
 0 0 0     black background
 F         no shadows cast
 25        Phong power
 0.25      secondary light contribution
 0.05      ambient light contribution
 0.25      specular reflection component
 4.0       eye position
 1 1 1     main light source position (from over right shoulder)
 1 0 0 0   input coordinate, radius transformation
 0 1 0 0
 0 0 1 0
 0 0 0 0.6 enlarge by 40% (smaller scalar -> bigger objects)
 3         mixed objects
 *         (free format triangle descriptors)
 *         (free format sphere descriptors)
 *         (free format cylinder descriptors)
 
.SH SOURCE
.TP 5
	anonymous ftp site:	
                stanzi.bchem.washington.edu   (128.95.12.38)
.TP 5
	contact:		
                Ethan A Merritt
                Dept of Biological Structure SM-20
                University of Washington, Seattle WA 98195
                merritt@u.washington.edu

.SH SEE ALSO
rods(1), ribbon(1), setup(1), ImageMagick(1), MOLSCRIPT(1)
.PP
.SH AUTHORS
	Originally written by David J. Bacom and Wayne F. Anderson.
	Extensions, revisions, and modifications by Ethan A Merritt.

