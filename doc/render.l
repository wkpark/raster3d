.l
.nh
.TH RENDER 1 "29 April 1995" "Raster3D"
.SH NAME
render - image rendering program of Raster3D molecular graphics package
.SH SYNOPSIS
.B "render" [\fI-tiff filename\fP] [\fI-sgi filename\fP] [\fI-original\fP]
.PP
\fIRender\fP reads an ascii file consisting of several header lines
followed by individual object descriptors. 
The objects are rendered using a fast Z-buffer algorithm to produce
a high quality pixel image which contains two light sources, 
specular highlighting, Phong shaded surfaces, and shadows.
Output is to stdout [or optional file] in the form of a pixel image
with 24 bits of color information per pixel.
Several utility programs exist which will create all or part
of an acceptable input file by reading atomic coordinates from a
Brookhaven PDB file.
These include \fIballs\fP, \fIrods\fP, and \fIribbon\fP from the 
\fIRaster3D\fP distribution kit, and \fIMOLSCRIPT\fP [ref: Kraulis, 1991].

.PP
.SH EXAMPLES
.PP
To render a simple space-filling model coloured by residue type:
.PP
     cat mycolors.pdb protein.pdb | balls | render > mypicture.avs
.PP
Display the same picture on an X-windows display directly using 
ImageMagick:
.PP
     cat mycolors.pdb protein.pdb | balls | render | display avs:-
.PP
To render and display the same picture using the SGI libimage format:
.PP
     cat mycolors.pdb protein.pdb | balls | render -sgi picture.rgb
     ipaste picture.rgb
.PP
Render a stick-figure model of a cofactor jointly with a ribbon
model of a protein.
Note that the header records are generated by
the \fIribbon\fP command in this case; the -h flag suppresses generation
of a second set of header records in the \fIrods\fP command.
The ImageMagick \fIconvert\fP command is used to save the resulting
image as a TIFF file.
.PP
     ribbon -d4 protein.pdb > ribbon.r3d
     cat colors.pdb cofactor.pdb | rods -bs -h > cofactor.r3d
     cat ribbon.r3d cofactor.r3d | render | convert avs:- picture.tiff
.SH OPTIONS
.TP 5
.B "-tiff filename"

Only if compiled with -DTIFF_SUPPORT.
By default \fIrender\fP will produce an AVS-compatible image on stdout.
The -tiff flag will cause it to output a TIFF image to the specified
file instead.

.B "-sgi filename"

Only if compiled with -DLIBIMAGE_SUPPORT.
By default \fIrender\fP will produce an AVS-compatible image on stdout.
The -sgi flag will cause it to output an SGI libimage style *.rgb file
instead.
In this case default output is to the file render.rgb, but specifying a file
on the command line will override this default.

.B "-original"

This flag causes \fIrender\fP to produce an output image compatible with
some earlier versions of the \fIRaster3D\fP package. Output is to stdout.

.SH DESCRIPTION
.PP 
The input to \fIrender\fP consists of a single text file
containing everything necessary to prepare the image
of a scene consisting of coloured spheres, cylinders and triangles.
The header records contain information 
global to the scene being rendered.  The header records are
followed by individual object records containing coordinate and
color specification for the objects in the scene.
.PP 
The required header records of a \fIrender\fP input file are
described below.
Except where noted, each item is on a line by itself in
free format.  The names are of variables in the program
source code.
.TP 5 
.B     TITLE    
Anything you like, up to 80 characters.
.TP 5 
.B     NTX,NTY  
Number of "tiles" in each direction.  (The output
display is considered to be divided up into an
array of identical rectangular tiles.)
Maximum = 192 (controlled by MAXNTX, MAXNTY in render.f)
.TP 5 
.B     NPX,NPY  
Number of computing pixels per tile in each direction.
Maximum = 36 (controlled by MAXNPX, MAXNPY in render.f)
.TP 5 
.B     SCHEME   
Pixel averaging (anti-aliasing) scheme (1, 2, or 3), where
 1 means   1 computing pixel  for 1 output pixel
 2 means 2x2 computing pixels for 1 output pixel
 3 means 3x3 computing pixels for 2x2 output pixels

(i.e. scheme 1 produces a NTX*NPX by NTY*NPY pixel image,
scheme 3 produces a (2/3)NTX*NPX by (2/3)NTY*NPY image)
Increased anti-aliasing produces a scene in which objects
have less jagged edges, at the cost of additional computation.
Note that if you select scheme 3 then NPX and NPY must be
multiples of 3.
.TP 5 
.B     BKGND    
Background colour (red, green, and blue components,
each in the range 0 to 1).
.TP 5 
.B     SHADOW   
T to calculate shadowing within the scene, F to omit shadows
.TP 5 
.B     IPHONG   
Phong power (e.g., 25) for specular reflections.
A smaller value results in a larger spot.
.TP 5 
.B     STRAIT   
Straight-on (secondary) light source contribution
(e.g., 0.15).  The primary light source contribution
(see also SOURCE below) is given by PRIMAR = 1 - STRAIT.
.TP 5 
.B     AMBIEN   
Ambient reflection quantity (e.g., 0.05).
.TP 5 
.B     SPECLR   
Specular reflection quantity (e.g., 0.25).
The diffuse reflection quantity is given by
DIFFUS = 1 - (AMBIEN+SPECLR).  Ambient and diffuse
reflections are chromatic, taking on the specified
colour of each object, whereas specular reflections
are white.
.TP 5 
.B     EYEPOS   
You can think of the image produced by Raster3D as corresponding 
to a photograph taken by a camera placed a certain distance away
from the objects making up the scene. This distance is controlled
by the EYEPOS parameter.  EYEPOS = 4 describes a perspective corresponding
to a viewing distance 4 times the narrow dimension of the described scene.
A very large value of EYEPOS will yield a scene with essentially no
parallax or perspective.
.TP 5 
.B     SOURCE   
Primary light source position (e.g., 1 1 1).  
This is a white light point
source at infinite distance in the direction of this vector
(see note on co-ordinate convention below).  
The secondary light source is always haed-on. 
Only the primary light source casts shadows.
.TP 5 
.B     TMAT     
Homogeneous global transformation for input objects,
given as a 4x4 matrix on 4 lines just as you would
write it if you intended it to be a postfix (suffix)
operator.  The upper left 3x3 submatrix expresses
a pure rotation, the lower left 1x3 submatrix
gives a translation, the upper right 3x1 submatrix
should be zero (otherwise extra perspective is
introduced), and the lower right scalar produces
global scaling.
Coordinate vectors [x y z] are extended with a 1
to make them homogeneous, and then postmultiplied
by the entire matrix; 
 i.e., if 
      [x' y' z' h'] = [x y z 1][TMAT],
 then the ultimate co-ordinates are
      [x" y" z"] = (1/h')[x' y' z'].
.TP 5 
.B     INMODE   
Object input mode (1, 2, or 3), where
mode 1 means that all objects are triangles,
mode 2 means that all objects are spheres,
and mode 3 means that each object will be preceded
by a record containing a single number indicating its type.
The Raster3D programs always use mode INMODE 3.
 type 1 = triangle
 type 2 = sphere
 type 3 = round-ended cylinder
 type 5 = flat-ended cylinder
 type 6 = plane (triangle with infinite extent)
 type 7 = explicit normals at vertices of previous triangle
 type 8 = explicit material properties for subsequent objects
 type 9 = terminate previous explicit material properties (if any)
	  otherwise ignored, so remainder of line may act as a comment
 type 0 = end of input file
.TP 5 
.B     INFMT or INFMTS
Object input format specifier(s).  For object input
modes 1 and 2, there is just one format specifier
INFMT for the corresponding object type, while for
mode 3, there are three format specifiers INFMTS
on three lines.  The first describes the format
for a triangle, the second for a sphere, and the
third for a cylinder.  Each format specifier
is either a Fortran format enclosed in parentheses,
or a single asterisk to indicate free-format input.
Parameters are read in the order

 triangle or plane (object types 1 or 6): 
      x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue;
 sphere (object type 2):    
      x, y, z, radius, red, green, blue;
 cylinder (object type 3 or 5): 
      x1, y1, z1, R1, x2, y2, z2, R2, red, green, blue.
      (R1 is the cylinder radius, R2 is currently ignored).

.TP 5
.B ADDITIONAL OBJECT TYPES ADDED IN VERSION_2.1
.PP
Version 2.1 of the Raster3D supports a few new object types.
These are intended to provide additional flexibility in adapting other
molecular graphics tools to compose figures for Raster3D to render.
These are mostly of interest to programmers, as the utilities supplied
with the package currently make no use of them.

  Object type 7
    Explicit vertex normals for preceeding triangle object. This object 
    must directly follow the triangle object, and uses the same format.
    The intended use of this object type is to allow rendering of
    arbitrary molecular surfaces.
  Object type 8
    Material properties. These values override the specification of
    lighting and specular highlighting in the header records, allowing
    some objects to have different surface properties from the rest.
    The specified values will apply to all subsequent objects until
    an object of type 9 is encountered.  The parameters are read as
    free format floating point numbers from the following line:
        MPHONG - override global Phong power for specular highlighting
        MSPEC  - override global specular scattering contribution
        SR,SG,SB - RGB triple specifying color of reflected light
                   (by default all specular highlights are white)
        TEXMAP - texture map (not yet implemented)
  Object type 9
    Terminates previous set of special material properties.
    The rest of this record is ignored, so object type 9 may also
    be used as a comment record.


.TP 5
.B SAMPLE HEADER

 My picture. (describes a 1280 x 1024 pixel anti-aliased image)
 80 64     tiles in x,y
 24 24     pixels (x,y) per tile
 3         anti-aliasing level 3;  3x3->2x2
 0 0 0     black background
 F         no shadows cast
 25        Phong power
 0.25      secondary light contribution
 0.05      ambient light contribution
 0.25      specular reflection component
 4.0       eye position
 1 1 1     main light source position (from over right shoulder)
 1 0 0 0   view matrix describing input coordinate transformation
 0 1 0 0
 0 0 1 0
 0 0 0 0.6 enlarge by 40% (smaller scalar -> bigger objects)
 3         mixed objects
 *         (free format triangle descriptors)
 *         (free format sphere descriptors)
 *         (free format cylinder descriptors)


.SH INCREASING THE ARRAY SIZES
.PP
If you are creating images of very large proteins, or if you are rendering
surfaces with many facets, then you may fill the storage arrays in render.
If so you will get an error message something like
.PP
	STOP 1234 **** too many objects - increase MAXOBJ and recompile
.PP
The parameters which you may need to increase are contained in the 
following lines of render.f:
.PP
 *     Maximum number of objects (was 7500)
       PARAMETER (MAXOBJ = 25000)
 *
 *     Array elements available for object details
       PARAMETER (MAXDET = 250 000, MAXSDT = 250 000)
 *
 *     Array elements available for sorted lists ("short" lists)
       PARAMETER (MAXSHR = 150 000, MAXSSL = 150 000)
.PP
Increase the appropriate PARAMETER values by editing render.f, and
recompile the render program by typing "make render".

.SH SOURCE
.TP 5
	anonymous ftp site:	
                ftp.bmsc.washington.edu
.TP 5
	contact:		
                Ethan A Merritt
                Dept of Biological Structure SM-20
                University of Washington, Seattle WA 98195
                merritt@u.washington.edu

.SH SEE ALSO
avs2ps(1), rods(1), ribbon(1), balls(1), ImageMagick(1), MOLSCRIPT(1)
.PP
.SH AUTHORS
Originally written by David J. Bacon. 
Extensions, revisions, and modifications by Ethan A Merritt.

