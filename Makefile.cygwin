###########################################Makefile.cygwin##########################
#
# Makefile.cygwin
# Raster3D makefile for Windows under Cgwin1.1.4
#
# I recently put some efforts in porting Molscript and Raster3D to my Windows 2000 laptop.
# Both of the program compiles on the Windows under Cygwin with a small effort. I have 
# read the FAQ on how to compile RASTER3D under Windows. Obviously, the Makefile within
# the distribution and the information on the web is outdated because of the development 
# of Cygwin. Now Cygwin is at version 1.1.4 instead of beta stage.
# 
# The procedure by Suhaib Siddiqi is basically still correct. With the new cygwin, the 
# steps are a lot simpler. Here are the steps I used to port Raster3D.
# 
# 1. Goto http://sources.redhat.com, download and install Cygwin, the easiest way is 
#    to download everything in the lastest directory and install everything into a 
#    directory, say c:\cygwin. 
# 
# 2. Download the jpeg, png and tiff library from the contrib directory on cygwin 
#    distribution site. This saves your energy of compiling the libraries.
#    This binary libraries, by default, install into /usr/lib, 
#    include files to go /usr/include
#    To install the libraries, 
#    % cd /
#    % tar xvfz /whateveryourdownloadedfilelocated.tar.gz(or Z)
# 
# 3. Download the Raster3D(2.5d currently) and 
#    % tar xvfz raster3d-DISTRIBUTIONFILE.TAR.GZ 
#    
# 4. I have included a modified Makefile (minimum modification from Makefile.sgi) as below.
#    % make 
# 
# 5. cp all *.exe to a directory which is in your path, eg. /usr/local/bin or /usr/bin
# 
# 6. Under Cygwin(bash shell), run render or other programs just like regular unix
#    enviroment. 
# 
# -Qingping 

#
# [Note:  For V2.5f I updated this to strip out CARRIAGECONTROL and DISPOSE options
# to Fortran OPEN statements by using 'egrep'.  I hope this works under cygwin???
# If not, you'll have to strip these lines out by hand.]
# -Ethan

CC= gcc 
LDFLAGS = 
CFLAGS  = -O3 -m486 -Wall -fomit-frame-pointer -funroll-loops
FC	= g77
FFLAGS	= -O3 -a -w -Wall

#
# Render really benefits from optimization, so try to get this right.
FOPTS	= 

#
# TIFF support (enabled by default)
#     add -DTIFF_SUPPORT to the DEFINES statement.
#     add -ltiff to the LIBS definition.
# The TIFF_INVERT option is a work-around for broken programs
# (e.g. PhotoShop) that don't properly read the TIFF header.
#
# JPEG support (disabled by default)
#     add -DJPEG_SUPPORT to the DEFINES statement.
#     add -ljpeg to the LIBS definition.
#
# Auto conversion of output using ImageMagick (enabled by default)
#     add -DIMAGEPIPE to the DEFINES statement.
#
# SGI imagetools support (-sgi output option to produce *.rgb files)
#     add -DLIBIMAGE_SUPPORT to the DEFINES statement.
#     add -limage to the LIBS definition
#         (source for libimage.a is available in the 4DGifts kit from SGI)
#
 LIBS    =	-ltiff -ljpeg
 DEFINES =	-DTIFF_SUPPORT -DTIFF_INVERT -DJPEG_SUPPORT
INCLUDES =

#LIBS    =
#DEFINES =
#INCLUDES=


RIBOBJS =	ribbon.o ribbon1.o modsubs.o
PROGS   =	balls normal3d rastep rods ribbon render avs2ps rings3d

all:	$(PROGS)

clean:
	rm -f *.o *.u core
	rm -f *.exe

install: $(PROGS)
	mv *.exe /usr/local/bin
	cp doc/*.l /usr/local/man/manl
	cp stereo3d /usr/local/bin/
	cp label3d  /usr/local/bin/
	@echo "	*******************************************"
	@echo "	* The examples/ subdirectory contains     *"
	@echo "	* files to verify your installation and   *"
	@echo "	* to serve as examples of use.            *"
	@echo "	*******************************************"

tar:
	(cd ..; tar -cvf Raster3D_$(VERSION).tar raster3d)
	/usr/bin/compress  ../Raster3D_$(VERSION).tar
	(cd ..; gtar -czvf Raster3D_$(VERSION).tar.gz raster3d)

normal3d: normal3d.o quadric.o
	$(FC) $(FFLAGS) normal3d.o quadric.o -o normal3d

rastep.o: rastep.f
	mv rastep.f rastep.bak
	egrep -v '(CARRIAGECONTROL|DISPOSE)' rastep.bak > rastep.f

rastep:	rastep.o quadric.o suv.o
	$(FC) $(FFLAGS) rastep.o quadric.o suv.o -o rastep

ribbon:	$(RIBOBJS)
	$(FC) -O $(RIBOBJS) -o ribbon

local.o: local.c
	$(CC) $(CFLAGS) $(INCLUDES) $(DEFINES) -c local.c

render.o: render.f
	mv render.f render.bak
	egrep -v '(CARRIAGECONTROL|DISPOSE)' render.bak > render.f
	$(FC) $(FOPTS) -c render.f

render:	render.o local.o quadric.o parse.o r3dtops.o ungz.o
	$(FC) $(FFLAGS) render.o quadric.o local.o parse.o r3dtops.o \
	$(LIBS) -o render $(LDFLAGS)

avs2ps:	avs2ps.c
	$(CC) -O avs2ps.c -o avs2ps -lm

#################################################end of Makefile################
